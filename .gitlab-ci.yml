.test-base:
  stage: test
  variables:
    PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
    COVERAGE_FILE: "${CI_PROJECT_DIR}/.coverage.${CI_JOB_NAME}"
    MODULE: browsepy
  cache:
    paths:
    - .cache/pip
  artifacts:
    when: on_success
    expire_in: 1h
    paths:
    - .coverage.*
  before_script:
  - apk add --no-cache build-base python3-dev
  - pip install coverage flake8
  script:
  - flake8 ${MODULE}
  - coverage run -p setup.py test

.after-base:
  image: python:3.7-alpine
  variables:
    PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
    MODULE: browsepy
  cache:
    paths:
    - .cache/pip

.github-base:
  image:
    name: alpine/git
    entrypoint:
    - /bin/sh
    - -c
  variables:
    GITHUB_MIRROR: "git@github.com:ergoithz/browsepy.git"
  before_script:
  - mkdir -p ~/.ssh
  - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - ssh-keyscan -H $ssh_port "$ssh_host" >> ~/.ssh/known_hosts
  - git config user.name "${GITLAB_USER_LOGIN}"
  - git config user.email "${GITLAB_USER_EMAIL}"

stages:
- test
- report
- publish

python27:
  extends: .test-base
  image: python:2.7-alpine
  before_script:
  - apk add --no-cache build-base python2-dev
  - pip install coverage flake8

python35:
  extends: .test-base
  image: python:3.5-alpine

python36:
  extends: .test-base
  image: python:3.6-alpine

python37:
  extends: .test-base
  image: python:3.7-alpine

eslint:
  image: node:alpine
  stage: test
  cache:
    paths:
    - node_modules
  only:
    changes:
    - "**.json"
    - "**.js"
    - .eslintignore
  before_script:
  - npm install eslint
  script:
  - node_modules/.bin/eslint ${MODULE}

coverage:
  extends: .after-base
  stage: report
  artifacts:
    when: always
    paths:
    - htmlcov
  coverage: '/^TOTAL\s+(?:\d+\s+)*(\d+\%)$/'
  before_script:
    - pip install coverage
  script:
  - coverage combine
  - coverage html --fail-under=0
  - coverage report

doc:
  extends: .after-base
  stage: report
  dependencies: []
  artifacts:
    paths:
    - doc/.build
  before_script:
  - apk add --no-cache make
  - pip install -r requirements/doc.txt
  script:
  - make -C doc html

publish-github-mirror:
  extends: .github-base
  stage: publish
  dependencies: []
  only:
    refs:
    - next
    - master
  script:
  - git remote add github "${GITHUB_MIRROR}"
  - git push -u "${CI_COMMIT_REF_NAME}" github

publish-github-pages:
  extends: .github-base
  stage: publish
  dependencies:
  - doc
  only:
    refs:
    - master
  script:
  - git remote add github "${GITHUB_MIRROR}"
  - git fetch
  - git checkout gh-pages
  - cp -rf doc/.build/* .
  - rm -rf doc
  - git add **
  - git commit -am "doc from ${CI_COMMIT_SHA} ${CI_COMMIT_MESSAGE}"
  - git push github

publish-alpha:
  extends: .after-base
  stage: publish
  dependencies: []
  only:
    refs:
    - next
  before_script:
  - pip install twine
  script:
  - |
    ALPHA=$(date +%s)
    SED_REGEX="s/^__version__\s*=\s*[\"']([^\"']+)[\"']\$/__version__ = '\\1a${ALPHA}'/g"
    SED_PATH="${MODULE}/__init__.py"
    sed -ri "${SED_REGEX}" "${SED_PATH}"
    python setup.py bdist_wheel sdist
    twine upload --repository-url=https://test.pypi.org/legacy/ dist/*

publish:
  extends: .after-base
  stage: publish
  dependencies: []
  only:
    refs:
    - master
  before_script:
  - pip install twine
  script:
  - |
    python setup.py bdist_wheel sdist
    twine upload --repository-url=https://upload.pypi.org/legacy/ dist/*
