
# config

stages:
- test
- report
- external
- publish

.base:
  except:
    refs:
    - /^gh-pages(-.*)?$/

.python:
  extends: .base
  image: python:3.8-alpine
  cache:
    paths:
    - .cache/pip
  variables:
    PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
    MODULE: browsepy

.test:
  extends: .python
  stage: test
  variables: &test-variables
    PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
    COVERAGE_FILE: "${CI_PROJECT_DIR}/.coverage.${CI_JOB_NAME}"
    MODULE: browsepy
  artifacts:
    when: on_success
    expire_in: 1h
    paths:
    - .coverage.*
  before_script:
  - |
    apk add --no-cache build-base libffi-dev python3-dev
    pip install coverage flake8 wheel
  script:
  - coverage run -p setup.py flake8 test

.report:
  extends: .python
  stage: report

.publish:
  extends: .python
  stage: publish
  dependencies: []
  before_script:
  - |
    apk add --no-cache build-base libressl-dev libffi-dev python3-dev
    pip install twine

# stage: tests

python35:
  extends: .test
  image: python:3.5-alpine
  variables:
    <<: *test-variables
    NOCODECHECKS: true

python36:
  extends: .test
  image: python:3.6-alpine
  variables:
    <<: *test-variables
    NOCODECHECKS: true

python37:
  extends: .test
  image: python:3.7-alpine
  variables:
    <<: *test-variables
    NOCODECHECKS: true

python38:
  extends: .test
  image: python:3.8-alpine

eslint:
  extends: .base
  stage: test
  image: node:alpine
  cache:
    paths:
    - node_modules
  only:
    changes:
    - "**.json"
    - "**.js"
    - .eslintignore
    - .eslintrc.json
  before_script:
  - npm install eslint
  script:
  - node_modules/.bin/eslint ${MODULE}

# stage: report

coverage:
  extends: .report
  artifacts:
    when: always
    paths:
    - htmlcov
  coverage: '/^TOTAL\s+(?:\d+\s+)*(\d+\%)$/'
  before_script:
  - pip install coverage
  script:
  - |
    coverage combine
    coverage html --fail-under=0
    coverage report

doc:
  extends: .report
  dependencies: []
  artifacts:
    paths:
    - doc/.build/html
  before_script:
  - |
    apk add --no-cache make
    pip install -r requirements/doc.txt
  script:
  - |
    if [ "${CI_COMMIT_REF_NAME}" != "master" ]; then
      python setup.py alpha_version
    fi
    make -C doc html

# stage: publish

publish-gh-pages:
  extends: .base
  stage: publish
  image:
    name: alpine/git
    entrypoint:
    - /bin/sh
    - -c
  dependencies:
  - doc
  only:
    refs:
    - master
    - next
  before_script:
  - |
    mkdir -p ~/.ssh
    echo "${SSH_PRIVATE_KEY}" | tr -d '\r' > ~/.ssh/id_rsa
    chmod 600 ~/.ssh/id_rsa
    ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
    git config --global user.name "${GITLAB_USER_LOGIN}"
    git config --global user.email "${GITLAB_USER_EMAIL}"
  after_script:
  - rm ~/.ssh/id_rsa
  script:
  - |
    if [ "${CI_COMMIT_REF_NAME}" == "master" ]; then
      TARGET_BRANCH="gh-pages"
    else
      TARGET_BRANCH="gh-pages-${CI_COMMIT_REF_NAME}"
    fi
    git init .gh_pages
    cd .gh_pages
    git remote add origin "git@gitlab.com:$CI_PROJECT_PATH.git"
    git fetch
    git checkout "${TARGET_BRANCH}" || git checkout --orphan "${TARGET_BRANCH}"
    cp ../.gitignore ../.appveyor.yml .
    cp -rf ${CI_PROJECT_DIR}/doc/.build/html/** .
    git add .
    git commit -am "update ${TARGET_BRANCH}"
    git push -u origin "${TARGET_BRANCH}"

publish-next:
  extends: .publish
  dependencies: []
  only:
    refs:
    - next
  script:
  - |
    python setup.py alpha_version bdist_wheel sdist
    twine upload --repository-url=https://test.pypi.org/legacy/ dist/*

publish-master:
  extends: .publish
  dependencies: []
  only:
    refs:
    - master
  script:
  - |
    python setup.py bdist_wheel sdist
    twine upload --repository-url=https://upload.pypi.org/legacy/ dist/*
